name: publish-container

on:
  workflow_call:
    inputs:

      docker_username:
        description: 'Docker username for registry login. Default: github.actor'
        required: false
        type: string
        default: ''

      dockerfiles:
        description: 'JSON array of objects with dockerfile path, context, prefix and postfix. Format: [{"dockerfile":"path/to/Dockerfile","context":"path/to/context","prefix":"","postfix":""}]. Results in image name: ghcr.io/ORG/prefix-{{ reponame }}-postfix:{{ tag }}. Default: [{"dockerfile":"./Dockerfile","context":".","prefix":"","postfix":""}]'
        required: false
        type: string
        default: '[{"dockerfile":"./Dockerfile","context":".","prefix":"","postfix":""}]'

      push:
        description: 'Whether to push the Docker image. Default: true'
        required: false
        type: boolean
        default: true

      registry:
        description: 'The container registry to push to. Default: ghcr.io'
        required: false
        type: string
        default: 'ghcr.io'
    
    secrets:
      docker_password:
        description: 'Docker password for registry login. Default: GITHUB_TOKEN'
        required: false

jobs:
  # Process the dockerfiles input to handle simplified specifications
  setup:
    runs-on: ubuntu-latest
    outputs:
      processed_dockerfiles: ${{ steps.process-dockerfiles.outputs.processed }}
    
    steps:
    - name: Process dockerfiles input
      id: process-dockerfiles
      run: |
        # Debug: Show the raw input
        echo "Raw dockerfiles input:"
        echo '${{ inputs.dockerfiles }}'
        
        # Use jq to process the input
        # This will set default values for missing properties
        processed=$(echo '${{ inputs.dockerfiles }}' | jq -c '[.[] | {
          dockerfile: .dockerfile,
          context: (.context // "."),
          prefix: (.prefix // ""),
          postfix: (.postfix // "")
        }]')
        
        # Debug: Show the processed output
        echo "Processed dockerfiles:"
        echo "$processed"
        
        # Debug: Validate JSON format
        echo "Validating JSON format..."
        echo "$processed" | jq . || echo "ERROR: Invalid JSON format"
        
        # Set the output for the next job
        echo "processed=${processed}" >> $GITHUB_OUTPUT

  # Build and push Docker images
  publish-container:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: ${{ fromJson(needs.setup.outputs.processed_dockerfiles) }}

    permissions:
      packages: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Set lowercase names
      id: lowercase
      run: |
        echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "repo=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.docker_username != '' && inputs.docker_username || github.actor }}
        password: ${{ secrets.docker_password != '' && secrets.docker_password || secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ steps.lowercase.outputs.owner }}/${{ matrix.config.prefix }}${{ steps.lowercase.outputs.repo }}${{ matrix.config.postfix }}
        tags: |
          type=ref,event=tag
          type=ref,event=pr
          type=raw,value=pr-${{ github.event.pull_request.number }}-${{ github.sha }},event=pr
          type=sha

    - name: Log configuration
      run: |
        echo "Organization: ${{ github.repository_owner }}"
        echo "Repository: ${{ github.event.repository.name }}"
        echo "Lowercase Organization: ${{ steps.lowercase.outputs.owner }}"
        echo "Lowercase Repository: ${{ steps.lowercase.outputs.repo }}"
        echo "Using Dockerfile: ${{ matrix.config.dockerfile }}"
        echo "Using prefix: ${{ matrix.config.prefix }}"
        echo "Using postfix: ${{ matrix.config.postfix }}"
        echo "Labels: ${{ steps.meta.outputs.labels }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Package name: ${{ inputs.registry }}/${{ steps.lowercase.outputs.owner }}/${{ matrix.config.prefix }}${{ steps.lowercase.outputs.repo }}${{ matrix.config.postfix }}:${{ github.ref_name }}"

    - name: Build and Optionally Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ${{ matrix.config.context }}
        push: ${{ inputs.push }}
        file: ${{ matrix.config.dockerfile }}
        tags: |
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.owner }}/${{ matrix.config.prefix }}${{ steps.lowercase.outputs.repo }}${{ matrix.config.postfix }}:buildcache
        cache-to: type=registry,ref=${{ inputs.registry }}/${{ steps.lowercase.outputs.owner }}/${{ matrix.config.prefix }}${{ steps.lowercase.outputs.repo }}${{ matrix.config.postfix }}:buildcache,mode=max

  # Add PR comment with published images
  pr-comment:
    needs: publish-container
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && inputs.push
    permissions:
      pull-requests: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v5
      
    - name: Set lowercase names
      id: lowercase
      run: |
        echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        echo "repo=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ steps.lowercase.outputs.owner }}/${{ steps.lowercase.outputs.repo }}
        tags: |
          type=ref,event=tag
          type=ref,event=pr
          type=raw,value=pr-${{ github.event.pull_request.number }}-${{ github.sha }},event=pr
          type=sha

    - name: Generate Comment Body
      id: comment-body
      run: |
        # Create a file for the comment body
        COMMENT_FILE="comment_body.md"
        
        # Write the header
        echo "## Published Container Images" > $COMMENT_FILE
        echo "" >> $COMMENT_FILE
        echo "The following container images were published as part of this PR:" >> $COMMENT_FILE
        echo "" >> $COMMENT_FILE
        echo '```' >> $COMMENT_FILE
        
        # Save tags to a file for processing
        echo "${{ steps.meta.outputs.tags }}" > tags.txt
        
        # Loop through all the dockerfiles from the input
        echo '${{ inputs.dockerfiles }}' | jq -c '.[]' | while read -r config; do
          # Extract values from the config
          prefix=$(echo $config | jq -r '.prefix // ""')
          postfix=$(echo $config | jq -r '.postfix // ""')
          
          # Construct the image name
          image_name="${{ inputs.registry }}/${{ steps.lowercase.outputs.owner }}/$prefix${{ steps.lowercase.outputs.repo }}$postfix"
          
          # For each tag, output the full image:tag reference
          while read -r tag; do
            if [ -n "$tag" ]; then
              echo "$image_name:$tag" >> $COMMENT_FILE
            fi
          done < tags.txt
        done
        
        echo '```' >> $COMMENT_FILE
        
        echo "" >> $COMMENT_FILE
        echo "You can pull these images using:" >> $COMMENT_FILE
        echo '```bash' >> $COMMENT_FILE
        echo "docker pull IMAGE_URL:TAG" >> $COMMENT_FILE
        echo '```' >> $COMMENT_FILE
        
        # Set the output to the file content
        body=$(cat $COMMENT_FILE)
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$body" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Find Comment
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Published Container Images

    - name: Create or update comment
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.comment-body.outputs.body }}
        edit-mode: replace